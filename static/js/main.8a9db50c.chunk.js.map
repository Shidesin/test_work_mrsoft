{"version":3,"sources":["pages/mainPage/page-reducer.ts","redux/store.ts","selectors/selectorResultComponent.ts","components/ResultComponent.tsx","components/Input/Input.tsx","components/Button/Button.tsx","components/Preloader/Preloader.tsx","pages/mainPage/mainPage.tsx","App.tsx","index.tsx"],"names":["visible","loadStatus","initialState","loading","loadingOff","data","filterNumber","filterString","registerSensitivity","visibleNull","loadData","payload","type","setVisible","setRegister","rootReducer","combineReducers","mainPage","state","action","store","createStore","applyMiddleware","thunk","window","getWordArray","getFilteredDataByNumber","createSelector","number","filter","word","length","getFilteredDataBySubstring","string","register","indexOf","toLowerCase","ResultComponent","React","memo","visibleSelector","useSelector","filterResultByNumber","filterResultByString","visibleStr","map","visibleNum","StyledInput","styled","onChangeText","placeholder","value","restProps","onChange","e","currentTarget","StyledButton","onClick","disabled","Preloader","className","StyledWrapper","div","MainPage","dispatch","useDispatch","useEffect","loadingOn","fetch","then","responce","json","result","setTimeout","catch","err","loadingError","useState","filterValue","setFilterValue","registerValue","setRegisterValue","buttonNumberDisabled","Number","isNaN","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8a9db50c.chunk.js","sourcesContent":["export enum visible  {\r\n    visibleNum= 'number',\r\n    visibleStr= 'string',\r\n    visibleNull = 'null'\r\n}\r\n\r\nexport enum loadStatus {\r\n    loadingOn = 'Loading start',\r\n    loadingOff = 'Loading finish',\r\n    loadingError = 'Loading error'\r\n}\r\n\r\nlet initialState: initialStateType = {\r\n    loading: loadStatus.loadingOff,\r\n    data: [],\r\n    filterNumber: 0,\r\n    filterString:'',\r\n    registerSensitivity: false,\r\n    visible: visible.visibleNull\r\n}\r\n\r\nexport const mainPageReducer = (state = initialState, action: ActionTypes): initialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/LOAD_DATA':\r\n            return {...state, loading: action.payload}\r\n        case 'APP/SET_STATE':\r\n            return {...state, data: action.payload}\r\n        case 'APP/SET_FILTER_NUMBER':\r\n            return {...state, filterNumber: action.payload}\r\n        case 'APP/SET_FILTER_STRING':\r\n            return {...state, filterString: action.payload}\r\n        case 'APP/SET_VISIBLE':\r\n            return {...state, visible: action.payload}\r\n        case 'APP/SET_REGISTER':\r\n            return {...state, registerSensitivity: action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\n\r\nexport const loadData = (payload: loadStatus) => ({type: 'APP/LOAD_DATA', payload}as const)\r\nexport const setInitialState = (payload: string[]) => ({type: 'APP/SET_STATE', payload}as const)\r\nexport const setFilterByNumber = (payload: number) => ({type: 'APP/SET_FILTER_NUMBER', payload}as const)\r\nexport const setFilterBySubstring = (payload: string) => ({type: 'APP/SET_FILTER_STRING', payload}as const)\r\nexport const setVisible = (payload: visible) => ({type: 'APP/SET_VISIBLE', payload}as const)\r\nexport const setRegister = (payload: boolean) => ({type: 'APP/SET_REGISTER', payload}as const)\r\n\r\n\r\n//types\r\n\r\ntype ActionTypes =\r\n    | ReturnType<typeof loadData>\r\n    | ReturnType<typeof setInitialState>\r\n    | ReturnType<typeof setFilterByNumber>\r\n    | ReturnType<typeof setFilterBySubstring>\r\n    | ReturnType<typeof setVisible>\r\n    | ReturnType<typeof setRegister>\r\n\r\nexport type initialStateType = {\r\n    loading: loadStatus\r\n    data: string[]\r\n    filterNumber: number\r\n    filterString: string\r\n    registerSensitivity: boolean\r\n    visible: visible\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {mainPageReducer} from '../pages/mainPage/page-reducer';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst rootReducer = combineReducers({\r\n    mainPage: mainPageReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n//@ts-ignore\r\nwindow.store = store;\r\n\r\n","import {AppRootStateType} from '../redux/store';\r\nimport {createSelector} from '@reduxjs/toolkit';\r\n\r\n\r\nconst getWordArray = (state: AppRootStateType) => {\r\n    return state.mainPage.data\r\n}\r\n\r\nconst getFilterNumber = (state: AppRootStateType) => {\r\n    return state.mainPage.filterNumber\r\n}\r\n\r\nconst getFilterSubstring = (state: AppRootStateType) => {\r\n    return state.mainPage.filterString\r\n}\r\n\r\nconst getRegisterValue = (state: AppRootStateType) => {\r\n    return state.mainPage.registerSensitivity\r\n}\r\n\r\nexport const getFilteredDataByNumber = createSelector([getWordArray, getFilterNumber], (state, number) => {\r\n    return state.filter(word => word.length > number)\r\n})\r\n\r\nexport const getFilteredDataBySubstring = createSelector([getWordArray, getFilterSubstring, getRegisterValue], (state, string, register) => {\r\n    if (register) {\r\n        return state.filter(word => word.indexOf(string) > -1)\r\n    } else {\r\n        return state.filter(word => word.toLowerCase().indexOf(string.toLowerCase()) > -1)\r\n    }\r\n\r\n})\r\n","import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../redux/store';\r\nimport {visible} from '../pages/mainPage/page-reducer';\r\nimport {getFilteredDataByNumber, getFilteredDataBySubstring} from '../selectors/selectorResultComponent';\r\n\r\n\r\nexport const ResultComponent = React.memo(() => {\r\n\r\n    const visibleSelector = useSelector<AppRootStateType>(state => state.mainPage.visible)\r\n\r\n    let filterResultByNumber = useSelector(getFilteredDataByNumber)\r\n    let filterResultByString = useSelector(getFilteredDataBySubstring)\r\n\r\n\r\n    if (visibleSelector === visible.visibleStr) {\r\n        return filterResultByString.length ?\r\n            <div>{filterResultByString.map(word => <div key={word}>{word}</div>)}</div> :\r\n            <div>No Result</div>\r\n    }\r\n    if (visibleSelector === visible.visibleNum) {\r\n        return filterResultByNumber.length ?\r\n            <div>{filterResultByNumber.map(word => <div key={word}>{word}</div>)}</div> : <div>No Result</div>\r\n    }\r\n    return <div>No Result</div>\r\n\r\n})","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react';\r\nimport styled from 'styled-components';\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\ntype InputTextPropsType = DefaultInputPropsType & {\r\n    onChangeText?: (value: string) => void\r\n};\r\n\r\nconst Input: React.FC<InputTextPropsType> = (\r\n    {\r\n        onChangeText,\r\n        placeholder,\r\n        value,\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChangeText && onChangeText(e.currentTarget.value);\r\n    }\r\n    return (\r\n\r\n        <input\r\n            value={value}\r\n            type={'text'}\r\n            onChange={onChangeCallback}\r\n            placeholder={placeholder}\r\n            {...restProps}\r\n        />\r\n    );\r\n};\r\n\r\nexport const StyledInput = styled(Input)`\r\npadding: 5px 10px;\r\n    border-style: none;\r\n    border-radius: 15px;\r\n    margin: 10px 0 ;\r\n    box-shadow: 0 0 0 1px #2d2d2d, 0 0 5px 0 #2d2d2d;\r\n    outline: none;\r\n`;\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react';\r\nimport styled from 'styled-components';\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\r\n\r\nconst Button: React.FC<DefaultButtonPropsType> = (\r\n    {onClick, disabled, ...restProps}\r\n) => {\r\n    return (\r\n        <button onClick={onClick} disabled={disabled}\r\n            {...restProps}\r\n        />\r\n    );\r\n};\r\n\r\nexport const StyledButton = styled(Button)`\r\n    display: inline-block;\r\n    background-color: #999999;\r\n    color: white;\r\n    padding: .5em 1em;\r\n    border: 2px solid;\r\n    border-radius: 5px;\r\n    &:hover { background: #06adff;}\r\n    &:disabled { \r\n        opacity: 50%\r\n    }\r\n   \r\n`;\r\n","import React from 'react';\r\nimport './preloaderStyles.css'\r\n\r\nexport const Preloader = () => {\r\n    return(\r\n        <div className=\"cssload-thecube\">\r\n            <div className=\"cssload-cube cssload-c1\"/>\r\n            <div className=\"cssload-cube cssload-c2\"/>\r\n            <div className=\"cssload-cube cssload-c4\"/>\r\n            <div className=\"cssload-cube cssload-c3\"/>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {\r\n    loadData,\r\n    loadStatus,\r\n    setFilterByNumber,\r\n    setFilterBySubstring,\r\n    setInitialState,\r\n    setRegister,\r\n    setVisible,\r\n    visible\r\n} from './page-reducer';\r\nimport {ResultComponent} from '../../components/ResultComponent';\r\nimport {StyledInput} from '../../components/Input/Input';\r\nimport {StyledButton} from '../../components/Button/Button';\r\nimport styled from 'styled-components';\r\nimport {Preloader} from '../../components/Preloader/Preloader';\r\nimport {AppRootStateType} from '../../redux/store';\r\n\r\nconst StyledWrapper = styled.div`\r\n    margin-top: 20px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n`\r\n\r\nexport const MainPage = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(loadData(loadStatus.loadingOn))\r\n        fetch('https://cors-anywhere.herokuapp.com/https://www.mrsoft.by/data.json')\r\n            .then(responce => responce.json())\r\n            .then(result => {\r\n                dispatch(setInitialState(result['data']))\r\n                setTimeout(() => dispatch(loadData(loadStatus.loadingOff)), 3000)\r\n            })\r\n            .catch(err => {\r\n                dispatch(loadData(loadStatus.loadingError))\r\n            })\r\n    }, [dispatch]);\r\n\r\n    const loading = useSelector<AppRootStateType>(state => state.mainPage.loading)\r\n\r\n    const [filterValue, setFilterValue] = useState<string>('')\r\n    const [registerValue, setRegisterValue] = useState<boolean>(false)\r\n\r\n    const checkRegister = () => {\r\n        setRegisterValue(!registerValue)\r\n    }\r\n\r\n    const filterByLength = () => {\r\n        dispatch(setFilterByNumber(+filterValue))\r\n        dispatch(setVisible(visible.visibleNum))\r\n        dispatch(setRegister(registerValue))\r\n        setFilterValue('')\r\n    }\r\n\r\n    const filterBySubstring = () => {\r\n        dispatch(setFilterBySubstring(filterValue))\r\n        dispatch(setVisible(visible.visibleStr))\r\n        dispatch(setRegister(registerValue))\r\n        setFilterValue('')\r\n    }\r\n\r\n    const buttonNumberDisabled = !Number(filterValue)\r\n\r\n    const buttonStringDisabled = () => {\r\n        if (filterValue === '') {\r\n            return true\r\n        }\r\n        return !isNaN(Number(filterValue));\r\n    }\r\n\r\n    return (\r\n        <StyledWrapper>\r\n            {loading === loadStatus.loadingOn\r\n                ? (<Preloader/>)\r\n                : (\r\n                    <div>\r\n                        <StyledInput value={filterValue} placeholder={'Please, input value filter...'}\r\n                                     onChangeText={setFilterValue}/>\r\n                        <div>Register sensitivity: <input type={'checkbox'} onClick={checkRegister}/></div>\r\n                        <div>\r\n                            <StyledButton onClick={filterByLength} disabled={buttonNumberDisabled}>Filter by\r\n                                length</StyledButton>\r\n                            <StyledButton onClick={filterBySubstring} disabled={buttonStringDisabled()}>Filter by\r\n                                substring</StyledButton>\r\n                        </div>\r\n                        <ResultComponent/>\r\n                    </div>\r\n                )\r\n            }\r\n            {loading === loadStatus.loadingError ? <>'Error loading data'</> : null}\r\n        </StyledWrapper>\r\n\r\n    )\r\n};\r\n","import React from 'react';\nimport {Provider} from 'react-redux';\nimport {store} from './redux/store';\nimport { MainPage } from './pages/mainPage/mainPage';\n\nconst App = () => (\n        <Provider store={store}>\n            <MainPage/>\n        </Provider>\n);\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}