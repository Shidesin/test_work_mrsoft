{"version":3,"sources":["pages/mainPage/page-reducer.ts","redux/store.ts","selectors/selectorResultComponent.ts","components/ResultComponent.tsx","components/Input/Input.tsx","components/Button/Button.tsx","components/Preloader/Preloader.tsx","pages/mainPage/mainPage.tsx","App.tsx","index.tsx"],"names":["visible","loadStatus","initialState","loading","loadingOn","data","filterNumber","filterString","registerSensitivity","visibleNull","slice","createSlice","name","reducers","loadData","state","action","payload","setInitialState","setFilterByNumber","setFilterBySubstring","setVisible","setRegister","mainPageReducer","reducer","actions","rootReducer","combineReducers","mainPage","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","getWordArray","getFilteredDataByNumber","createSelector","number","filter","word","length","getFilteredDataBySubstring","string","register","indexOf","toLowerCase","ResultComponent","React","memo","visibleSelector","useSelector","filterResultByNumber","filterResultByString","visibleStr","map","visibleNum","StyledInput","styled","onChangeText","placeholder","value","restProps","type","onChange","e","currentTarget","StyledButton","onClick","disabled","Preloader","className","StyledWrapper","div","MainPage","dispatch","useDispatch","useEffect","fetch","then","responce","json","result","setTimeout","loadingOff","catch","err","loadingError","useState","filterValue","setFilterValue","registerValue","setRegisterValue","buttonNumberDisabled","Number","isNaN","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.61ac5c26.chunk.js","sourcesContent":["import { createSlice, Dispatch } from '@reduxjs/toolkit'\n\nexport enum visible {\n    visibleNum = 'number',\n    visibleStr = 'string',\n    visibleNull = 'null',\n}\n\nexport enum loadStatus {\n    loadingOn = 'Loading start',\n    loadingOff = 'Loading finish',\n    loadingError = 'Loading error',\n}\n\nlet initialState: initialStateType = {\n    loading: loadStatus.loadingOn,\n    data: [],\n    filterNumber: 0,\n    filterString: '',\n    registerSensitivity: false,\n    visible: visible.visibleNull,\n}\n\nconst slice = createSlice({\n    name: 'mainPage',\n    initialState: initialState,\n    reducers: {\n        loadData(state, action) {\n            state.loading = action.payload\n        },\n        setInitialState(state, action) {\n            state.data = action.payload\n        },\n        setFilterByNumber(state, action) {\n            state.filterNumber = action.payload\n        },\n        setFilterBySubstring(state, action) {\n            state.filterString = action.payload\n        },\n        setVisible(state, action) {\n            state.visible = action.payload\n        },\n        setRegister(state, action) {\n            state.registerSensitivity = action.payload\n        },\n    },\n})\n\nexport const mainPageReducer = slice.reducer\n\n//actions\n\nexport const {\n    loadData,\n    setRegister,\n    setFilterByNumber,\n    setFilterBySubstring,\n    setInitialState,\n    setVisible,\n} = slice.actions\n\n// thunk\n\nexport const fetchData = () => (dispatch: Dispatch) => {\n    dispatch(loadData(loadStatus.loadingOn))\n    fetch('https://cors-anywhere.herokuapp.com/https://www.mrsoft.by/data.json')\n        .then((responce) => responce.json())\n        .then((result) => {\n            dispatch(setInitialState(result['data']))\n            setTimeout(() => dispatch(loadData(loadStatus.loadingOff)), 3000)\n        })\n        .catch((err) => {\n            dispatch(loadData(loadStatus.loadingError))\n        })\n}\n\n//types\n\nexport type initialStateType = {\n    loading: loadStatus\n    data: string[]\n    filterNumber: number\n    filterString: string\n    registerSensitivity: boolean\n    visible: visible\n}\n","import { combineReducers } from 'redux'\nimport { mainPageReducer } from '../pages/mainPage/page-reducer'\nimport thunk from 'redux-thunk'\nimport { configureStore } from '@reduxjs/toolkit'\n\nconst rootReducer = combineReducers({\n    mainPage: mainPageReducer,\n})\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\nexport const store = configureStore({\n    reducer: rootReducer,\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunk),\n})\n","import { AppRootStateType } from '../redux/store'\nimport { createSelector } from '@reduxjs/toolkit'\n\nconst getWordArray = (state: AppRootStateType) => {\n    return state.mainPage.data\n}\n\nconst getFilterNumber = (state: AppRootStateType) => {\n    return state.mainPage.filterNumber\n}\n\nconst getFilterSubstring = (state: AppRootStateType) => {\n    return state.mainPage.filterString\n}\n\nconst getRegisterValue = (state: AppRootStateType) => {\n    return state.mainPage.registerSensitivity\n}\n\nexport const getFilteredDataByNumber = createSelector([getWordArray, getFilterNumber], (state, number) => {\n    return state.filter((word) => word.length > number)\n})\n\nexport const getFilteredDataBySubstring = createSelector(\n    [getWordArray, getFilterSubstring, getRegisterValue],\n    (state, string, register) => {\n        if (register) {\n            return state.filter((word) => word.indexOf(string) > -1)\n        } else {\n            return state.filter((word) => word.toLowerCase().indexOf(string.toLowerCase()) > -1)\n        }\n    }\n)\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { AppRootStateType } from '../redux/store'\nimport { visible } from '../pages/mainPage/page-reducer'\nimport { getFilteredDataByNumber, getFilteredDataBySubstring } from '../selectors/selectorResultComponent'\n\nexport const ResultComponent = React.memo(() => {\n    const visibleSelector = useSelector<AppRootStateType>((state) => state.mainPage.visible)\n\n    let filterResultByNumber = useSelector(getFilteredDataByNumber)\n    let filterResultByString = useSelector(getFilteredDataBySubstring)\n\n    if (visibleSelector === visible.visibleStr) {\n        return filterResultByString.length ? (\n            <div>\n                {filterResultByString.map((word) => (\n                    <div key={word}>{word}</div>\n                ))}\n            </div>\n        ) : (\n            <div>No Result</div>\n        )\n    }\n    if (visibleSelector === visible.visibleNum) {\n        return filterResultByNumber.length ? (\n            <div>\n                {filterResultByNumber.map((word) => (\n                    <div key={word}>{word}</div>\n                ))}\n            </div>\n        ) : (\n            <div>No Result</div>\n        )\n    }\n    return <div>No Result</div>\n})\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react';\r\nimport styled from 'styled-components';\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\ntype InputTextPropsType = DefaultInputPropsType & {\r\n    onChangeText?: (value: string) => void\r\n};\r\n\r\nconst Input: React.FC<InputTextPropsType> = (\r\n    {\r\n        onChangeText,\r\n        placeholder,\r\n        value,\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChangeText && onChangeText(e.currentTarget.value);\r\n    }\r\n    return (\r\n\r\n        <input\r\n            value={value}\r\n            type={'text'}\r\n            onChange={onChangeCallback}\r\n            placeholder={placeholder}\r\n            {...restProps}\r\n        />\r\n    );\r\n};\r\n\r\nexport const StyledInput = styled(Input)`\r\npadding: 5px 10px;\r\n    border-style: none;\r\n    border-radius: 15px;\r\n    margin: 10px 0 ;\r\n    box-shadow: 0 0 0 1px #2d2d2d, 0 0 5px 0 #2d2d2d;\r\n    outline: none;\r\n`;\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react';\r\nimport styled from 'styled-components';\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\r\n\r\nconst Button: React.FC<DefaultButtonPropsType> = (\r\n    {onClick, disabled, ...restProps}\r\n) => {\r\n    return (\r\n        <button onClick={onClick} disabled={disabled}\r\n            {...restProps}\r\n        />\r\n    );\r\n};\r\n\r\nexport const StyledButton = styled(Button)`\r\n    display: inline-block;\r\n    background-color: #999999;\r\n    color: white;\r\n    padding: .5em 1em;\r\n    border: 2px solid;\r\n    border-radius: 5px;\r\n    &:hover { background: #06adff;}\r\n    &:disabled { \r\n        opacity: 50%\r\n    }\r\n   \r\n`;\r\n","import React from 'react';\r\nimport './preloaderStyles.css'\r\n\r\nexport const Preloader = () => {\r\n    return(\r\n        <div className=\"cssload-thecube\">\r\n            <div className=\"cssload-cube cssload-c1\"/>\r\n            <div className=\"cssload-cube cssload-c2\"/>\r\n            <div className=\"cssload-cube cssload-c4\"/>\r\n            <div className=\"cssload-cube cssload-c3\"/>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n    fetchData,\n    loadStatus,\n    setFilterByNumber,\n    setFilterBySubstring,\n    setRegister,\n    setVisible,\n    visible,\n} from './page-reducer'\nimport { ResultComponent } from '../../components/ResultComponent'\nimport { StyledInput } from '../../components/Input/Input'\nimport { StyledButton } from '../../components/Button/Button'\nimport styled from 'styled-components'\nimport { Preloader } from '../../components/Preloader/Preloader'\nimport { AppRootStateType } from '../../redux/store'\n\nconst StyledWrapper = styled.div`\n    margin-top: 20px;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n`\n\nexport const MainPage = () => {\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(fetchData())\n    }, [])\n\n    const loading = useSelector<AppRootStateType>((state) => state.mainPage.loading)\n\n    const [filterValue, setFilterValue] = useState<string>('')\n    const [registerValue, setRegisterValue] = useState<boolean>(false)\n\n    const checkRegister = () => {\n        setRegisterValue(!registerValue)\n    }\n\n    const filterByLength = () => {\n        dispatch(setFilterByNumber(+filterValue))\n        dispatch(setVisible(visible.visibleNum))\n        dispatch(setRegister(registerValue))\n        setFilterValue('')\n    }\n\n    const filterBySubstring = () => {\n        dispatch(setFilterBySubstring(filterValue))\n        dispatch(setVisible(visible.visibleStr))\n        dispatch(setRegister(registerValue))\n        setFilterValue('')\n    }\n\n    const buttonNumberDisabled = !Number(filterValue)\n\n    const buttonStringDisabled = () => {\n        if (filterValue === '') {\n            return true\n        }\n        return !isNaN(Number(filterValue))\n    }\n\n    return (\n        <StyledWrapper>\n            {loading === loadStatus.loadingOn ? (\n                <Preloader />\n            ) : (\n                <div>\n                    <StyledInput\n                        value={filterValue}\n                        placeholder={'Please, input value filter...'}\n                        onChangeText={setFilterValue}\n                    />\n                    <div>\n                        Register sensitivity: <input type={'checkbox'} onClick={checkRegister} />\n                    </div>\n                    <div>\n                        <StyledButton onClick={filterByLength} disabled={buttonNumberDisabled}>\n                            Filter by length\n                        </StyledButton>\n                        <StyledButton onClick={filterBySubstring} disabled={buttonStringDisabled()}>\n                            Filter by substring\n                        </StyledButton>\n                    </div>\n                    <ResultComponent />\n                </div>\n            )}\n            {loading === loadStatus.loadingError ? <>'Error loading data'</> : null}\n        </StyledWrapper>\n    )\n}\n","import React from 'react';\nimport {Provider} from 'react-redux';\nimport {store} from './redux/store';\nimport { MainPage } from './pages/mainPage/mainPage';\n\nconst App = () => (\n        <Provider store={store}>\n            <MainPage/>\n        </Provider>\n);\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}